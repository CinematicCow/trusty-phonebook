{"version":3,"sources":["App.js","index.js"],"names":["SERVER_HOST","process","REACT_APP_SERVER_HOST","base_url","concat","App","_useState","useState","_useState2","Object","slicedToArray","searchName","setSearchName","_useState3","_useState4","book","setBook","_useState5","name","number","_useState6","newEntry","setEntry","console","count","useEffect","axios","get","then","response","data","phonebook","log","PhonebookEntry","_ref","entry","DeleteButton","react_default","a","createElement","onClick","_e","window","confirm","delete","id","status","filter","live","key","htmlFor","type","value","onChange","e","field","target","map","each","toLowerCase","startsWith","onSubmit","event","preventDefault","duplicate_id","find","person","put","post","required","objectSpread","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dc35c614.chunk.js","sourcesContent":["import React from \"react\";\r\n// import ReactDOM from 'react-dom'\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nconst SERVER_PORT = process.env.REACT_APP_SERVER_PORT ? process.env.REACT_APP_SERVER_PORT : 80;\r\nconst SERVER_HOST = process.env.REACT_APP_SERVER_HOST ? process.env.REACT_APP_SERVER_HOST : \"localhost\";\r\nconst base_url = `http://${SERVER_HOST}:${SERVER_PORT}`;\r\n// TODO: Reject duplicate names from being added, this can be done if the server returns an error\r\n\r\nexport default function App() {\r\n  // Hook for search bar\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  // Tracks the global phonebook state\r\n  const [book, setBook] = useState([]);\r\n  // Controlled component for our form element\r\n  const [newEntry, setEntry] = useState({ name: \"\", number: \"\" });\r\n  console.count(`Rendering App component`);\r\n  // Use either useState's lazy init function OR useEffect hook to avoid a infinite loop of setBook and axios network request\r\n  // https://stackoverflow.com/questions/62050966/how-to-fetch-data-without-useeffect-hooks-in-react-function-component\r\n  useEffect(() => {\r\n    axios.get(`${base_url}/book`).then((response) => {\r\n      setBook(response.data.phonebook);\r\n    });\r\n  }, []);\r\n  console.log(book);\r\n  const PhonebookEntry = ({ entry }) => {\r\n    const DeleteButton = () => (\r\n      <button\r\n        onClick={(_e) => {\r\n          if (\r\n            window.confirm(\r\n              \"Do you really want to delete \" + entry.name + \" from phonebook?\"\r\n            )\r\n          ) {\r\n            axios.delete(`${base_url}/book/${entry.id}`).then((response) => {\r\n              if (response.status === 204) {\r\n                console.log(`${entry.name} deleted from Phonebook`);\r\n                setBook(book.filter((live) => live.id !== entry.id));\r\n              }\r\n            });\r\n          }\r\n        }}\r\n      >\r\n        Delete Entry\r\n      </button>\r\n    );\r\n    // (Fixed in previous commit) Warning here: When adding a new name via the react app (not downloaded from server), we don't se the id field\r\n    // as a result those entries added by the react app will have an undefined {entry.id}. To fix this we post to the\r\n    // server in addPhonebookEntry first and then fetch results from the server before rendering\r\n    return (\r\n      <li key={entry.id}>\r\n        Name : {entry.name}<br/>Number : {entry.number} <DeleteButton />\r\n      </li>\r\n    );\r\n  };\r\n\r\n  const addPhonebookEntry = (event) => {\r\n    // Prevent the default action ie submitting the form, which we are going to do here anyway\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event\r\n    event.preventDefault();\r\n    // event.target is the <Form /> we have defined the button submit on\r\n    // console.log(\"add phonebook entry button clicked\", event.target);\r\n    // Check if duplicate name exists\r\n    let duplicate_id = -1;\r\n    if (\r\n      book.find((person) => {\r\n        if (person.name === newEntry.name) {\r\n          duplicate_id = person.id;\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n    ) {\r\n      let confirm = window.confirm(\r\n        `${newEntry.name} already exists in Phonebook, do you want to update their number?`\r\n      );\r\n      if (confirm && duplicate_id !== -1) {\r\n        axios\r\n          // This will cause a BAD_REQUEST response from server because we are already checking for name duplicates\r\n          .put(`${base_url}/book/${duplicate_id}`, newEntry)\r\n          .then((response) => console.log(`${duplicate_id} updated to `, newEntry));\r\n      }\r\n    }\r\n    axios.post(`${base_url}/book`, newEntry).then((response) => {\r\n      axios.get(`${base_url}/book`).then((response) => {\r\n        // Set from GET request rather than just concating becz we depend on the server to issue a id\r\n        setBook(response.data.phonebook);\r\n      });\r\n    });\r\n  };\r\n\r\n  const findName = (e) => {\r\n    let field = e.target.value;\r\n    setSearchName(field);\r\n    // console.log(\"Search name: \", searchName);\r\n  };\r\n\r\n  const onNameChange = (e) => {\r\n    // e.target corresponds to the controlled <input> element\r\n    setEntry({ ...newEntry, name: e.target.value });\r\n  };\r\n\r\n  const onNumChange = (e) => {\r\n    // e.target corresponds to the controlled <input> element\r\n    setEntry({ ...newEntry, number: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook#69</h1>\r\n      <label htmlFor=\"searchName\">\r\n        Search phonebook:\r\n        <input\r\n          id=\"searchName\"\r\n          type=\"text\"\r\n          value={searchName}\r\n          onChange={findName}\r\n        />\r\n      </label>\r\n      <ul>\r\n        {/* Rendering a collection map() returns an array */}\r\n        {/* key attribute added for outer elem PhonebookEntry in order to shut up react unique key props */}\r\n        {searchName === \"\"\r\n          ? book.map((each) => <PhonebookEntry key={each.id} entry={each} />)\r\n          : book\r\n              .filter((each) =>\r\n                each.name.toLowerCase().startsWith(searchName.toLowerCase())\r\n              )\r\n              .map((each) => <PhonebookEntry key={each.id} entry={each} />)}\r\n      </ul>\r\n      <form onSubmit={addPhonebookEntry}>\r\n        <label htmlFor=\"name \">\r\n          Name:\r\n          {/* A controlled component w/ just a value is rendered as a read-only field */}\r\n          <input\r\n            id=\"name\"\r\n            name=\"fullname\"\r\n            type=\"text\"\r\n            required\r\n            value={newEntry.name}\r\n            onChange={onNameChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <label htmlFor=\"number\">\r\n          Number:{\" \"}\r\n          <input\r\n            id=\"number\"\r\n            name=\"number\"\r\n            type=\"text\"\r\n            required\r\n            value={newEntry.number}\r\n            onChange={onNumChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}